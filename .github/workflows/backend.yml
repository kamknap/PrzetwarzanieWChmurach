name: Backend Services CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'

jobs:
  # Test Auth Service
  auth-service-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: services/auth-service/requirements.txt
    
    - name: Install dependencies
      working-directory: services/auth-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run linter
      working-directory: services/auth-service
      run: |
        pip install black isort flake8
        black --check .
        isort --check-only .
        flake8 .
    
    - name: Run tests
      working-directory: services/auth-service
      run: pytest
      env:
        MONGO_URL: mongodb://localhost:27017/test_movie_rental
        JWT_SECRET: test-secret-key

  # Test Movies Service
  movies-service-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: services/movies-service/requirements.txt
    
    - name: Install dependencies
      working-directory: services/movies-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run linter
      working-directory: services/movies-service
      run: |
        pip install black isort flake8
        black --check .
        isort --check-only .
        flake8 .
    
    - name: Run tests
      working-directory: services/movies-service
      run: pytest
      env:
        MONGO_URL: mongodb://localhost:27017/test_movie_rental
        AUTH_SERVICE_URL: http://localhost:8000

  # Build i deploy serwisów backend
  backend-deploy:
    needs: [auth-service-test, movies-service-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [auth-service, movies-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build and push Docker image
      working-directory: services/${{ matrix.service }}
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/movie-rental-${{ matrix.service }}:${{ github.sha }} .
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/movie-rental-${{ matrix.service }}:latest .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/movie-rental-${{ matrix.service }}:${{ github.sha }}
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/movie-rental-${{ matrix.service }}:latest

  # Opcjonalnie: deploy do Azure Container Instances
  deploy-to-azure:
    needs: backend-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Container Instances
      run: |
        # Restart kontenerów z nowymi obrazami
        az container restart --resource-group movie-rental-rg --name movie-rental-auth
        az container restart --resource-group movie-rental-rg --name movie-rental-movies
        
        # Sprawdź status
        az container show --resource-group movie-rental-rg --name movie-rental-auth --query instanceView.state
        az container show --resource-group movie-rental-rg --name movie-rental-movies --query instanceView.state